generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Activity {
  id          String   @id @default(cuid())
  name        String?
  description String?
  image       String?
  link        String?
  packageId   String?
  Package     Package? @relation(fields: [packageId], references: [id])

  @@index([packageId])
}

model Gallery {
  id    String @id @default(cuid())
  image String @db.Text
}

model Package {
  id                  String                @id @default(cuid())
  name                String?               @unique
  contact             String?
  description         String?               @db.LongText
  location            String?
  cost                Float?
  image               String?
  details_file        String?
  updatedAt           DateTime              @updatedAt
  is_premium_flag     Boolean               @default(false)
  video_link          String?
  activities          Activity[]
  PackageRegistration PackageRegistration[]
}

model PackageRegistration {
  id             String         @id @default(cuid())
  total_cost     Float
  transactionsId String?        @unique
  userId         String         @unique
  packageId      String         @unique
  Package        Package        @relation(fields: [packageId], references: [id])
  Passenger      Passenger[]
  Transactions   Transactions[]
  User           User           @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Passenger {
  id                  String               @id @default(cuid())
  name                String
  age                 Int
  phone_no            String
  email               String               @unique
  packageRegId        String
  PackageRegistration PackageRegistration? @relation(fields: [packageRegId], references: [id])

  @@index([packageRegId])
}

model Review {
  id     String  @id @default(cuid())
  name   String?
  email  String? @unique
  review String?
}

model Transactions {
  id                    String               @id @default(cuid())
  status                Status               @default(PENDING)
  cost                  Int
  updatedAt             DateTime             @updatedAt
  packageRegistrationId String?
  PackageRegistration   PackageRegistration? @relation(fields: [packageRegistrationId], references: [id])

  @@index([packageRegistrationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String                @id @default(cuid())
  dob                 DateTime?
  phone               Int?
  gender              String?
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role                  @default(CUSTOMER)
  accounts            Account[]
  sessions            Session[]
  PackageRegistration PackageRegistration[]
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Status {
  PENDING
  BOOKED
  REFUNDED
  CANCELLED
  PROCESSING
}
